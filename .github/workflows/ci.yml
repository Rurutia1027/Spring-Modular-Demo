name: CI Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile-and-image-project:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6.2
        ports:
          - 6389:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        ports:
          - 3316:3306
        env:
          MYSQL_ROOT_PASSWORD: root
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    outputs:
      build_number: ${{ steps.build-number.outputs.build_number }} 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start Consul
        run: |
          docker run -d --name consul \
            -p 8510:8500 -p 8610:8600/udp \
            hashicorp/consul:latest \
            agent -dev -client=0.0.0.0

      - name: Start Envoy
        run: |
          docker run -d --name envoy \
            -p 11000:10000 \
            --link consul:consul \
            -v ${{ github.workspace }}/Spring-Project/gateway/envoy.yml:/etc/envoy/envoy.yaml:ro \
            envoyproxy/envoy:v1.26.0 \
            -c /etc/envoy/envoy.yaml

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Init MySQL schema and user
        run: |
          echo "CREATE DATABASE demo;" | mysql -h 127.0.0.1 -P 3316 -uroot -proot
          echo "CREATE USER 'admin'@'%' IDENTIFIED BY 'admin';" | mysql -h 127.0.0.1 -P 3316 -uroot -proot
          echo "GRANT ALL PRIVILEGES ON link.* TO 'admin'@'%';" | mysql -h 127.0.0.1 -P 3316 -uroot -proot
          echo "FLUSH PRIVILEGES;" | mysql -h 127.0.0.1 -P 3316 -uroot -proot

      - name: Wait for services
        run: |
          echo "Sleeping 20s to ensure MySQL & Redis are ready..."
          sleep 20

      - name: Build with Maven
        run: cd Spring-Project && mvn clean install -DskipTests

      - name: Run Tests
        run: cd Spring-Project && mvn test

      - name: Generate JaCoCo Test report
        run: cd Spring-Project && mvn clean verify 

      - name: Upload JaCoCo HTML report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: Spring-Project/project/target/site/jacoco/

      # generate a timestamp based unique build number rather than using latest which is hard to distinguish
      - name: Generate Build Number and Save It to File
        id: build-number
        run: |
          BUILD_NUMBER=$(date '+%d-%m-%Y-%H-%M-%S')
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT    
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Local Docker Image with Maven
        run: |
          cd Spring-Project && mvn clean package -Pbuild-docker-image -Dapp.image.tag=${{ env.BUILD_NUMBER }} -Djib.container.jvmFlags="-Dspring.profiles.active=prod"
          # show local docker images 
          docker images 
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  run-bdd-tests:
    needs: compile-and-image-project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout BDD code
        uses: actions/checkout@v3

      - name: Set Build Number
        run: |
          echo "BUILD_NUMBER=${{ needs.compile-and-image-project.outputs.build_number }}" >> $GITHUB_ENV

      - name: Start services with Docker Compose
        run: |
          BUILD_NUMBER=${{ env.BUILD_NUMBER }}
          docker compose -f Spring-Project/docker-compose-bdd.yml up -d --build

      - name: Wait for services to be ready
        run: |
          echo "Waiting 30s for services to start..."
          sleep 30
      
      - name: Show Envoy Logs
        run: |
          echo "==== Envoy Logs ===="
          docker logs spring-project-envoy || true

      - name: Run BDD Tests
        run: |
          cd Spring-Project/bdd-test
          echo "gonna execute mvn verify -P bdd-test"

      - name: Tear down Docker Compose services
        if: always()
        run: |
          docker compose -f Spring-Project/docker-compose-bdd.yml down